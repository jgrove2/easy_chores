// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groupMemberships GroupMembership[]
  choreAssignments ChoreAssignment[]
  choreCompletions ChoreCompletion[]
  modifiedChores   Chore[] @relation("ChoreLastModifier")
  assignedChores   Chore[] @relation("ChoreAssignedUser")
  activities       Activity[]

  @@map("users")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  joinCode  String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships GroupMembership[]
  chores      Chore[]
  activities  Activity[]

  @@map("groups")
}

model GroupMembership {
  id      String @id @default(cuid())
  userId  String
  groupId String
  role    String @default("member") // member, admin

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_memberships")
}

model Chore {
  id              String   @id @default(cuid())
  title           String
  frequency       String   // daily, weekly, custom
  customInterval  Int?
  assignmentType  String   // single, alternating
  groupId         String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastModifiedBy  String?  // User ID who last modified the chore
  assignedUserId  String?  // User ID who is assigned to this chore
  nextDueDate     DateTime? // Next due date for this chore

  // Relations
  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignments ChoreAssignment[]
  completions ChoreCompletion[]
  lastModifier User?           @relation("ChoreLastModifier", fields: [lastModifiedBy], references: [id])
  assignedUser User?           @relation("ChoreAssignedUser", fields: [assignedUserId], references: [id])

  @@map("chores")
}

model ChoreAssignment {
  id       String @id @default(cuid())
  choreId  String
  userId   String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())

  // Relations
  chore Chore @relation(fields: [choreId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([choreId, userId])
  @@map("chore_assignments")
}

model ChoreCompletion {
  id          String   @id @default(cuid())
  choreId     String
  userId      String
  completedAt DateTime @default(now())
  nextDueDate DateTime

  // Relations
  chore Chore @relation(fields: [choreId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chore_completions")
}

model Activity {
  id          String   @id @default(cuid())
  groupId     String
  userId      String
  type        String   // chore_created, chore_updated, chore_deleted, chore_completed, user_joined, user_left, group_created, group_deleted
  description String
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}